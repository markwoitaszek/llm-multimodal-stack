name: 🔄 Continuous Integration

on:
  push:
    branches: [ main, 'develop/*', 'feature/*', 'hotfix/*' ]
  pull_request:
    branches: [ main, 'develop/*' ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality and Security
  quality:
    name: 🔍 Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 📦 Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: 🔧 Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy bandit safety
          # Install project dependencies for analysis
          find . -name "requirements.txt" -exec pip install -r {} \;

      - name: 🎨 Check code formatting (Black)
        run: black --check --diff services/

      - name: 📦 Check import sorting (isort)
        run: isort --check-only --diff services/

      - name: 🔍 Lint code (flake8)
        run: flake8 services/ --max-line-length=88 --extend-ignore=E203,W503

      - name: 🔒 Security scan (Bandit)
        run: bandit -r services/ -f json -o bandit-report.json || true

      - name: 📊 Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results
          path: bandit-report.json

      - name: 🛡️ Check dependencies for vulnerabilities
        run: safety check --json --output safety-report.json || true

      - name: 📊 Upload dependency scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-scan-results
          path: safety-report.json

  # Docker Build and Test
  docker:
    name: 🐳 Docker Build & Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [multimodal-worker, retrieval-proxy, ai-agents, memory-system, search-engine, user-management]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./services/${{ matrix.service }}
          file: ./services/${{ matrix.service }}/Dockerfile
          tags: ${{ matrix.service }}:test
          load: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: 🧪 Test Docker image
        run: |
          # Basic container test
          docker run --rm ${{ matrix.service }}:test python -c "import sys; print('Python version:', sys.version)"
          
          # Test service startup (with timeout)
          timeout 30s docker run --rm ${{ matrix.service }}:test python -c "
          try:
              from main import app
              print('✅ Application imports successfully')
          except Exception as e:
              print('❌ Application import failed:', e)
              exit(1)
          " || echo "⚠️ Startup test timed out (expected for services requiring dependencies)"

  # Infrastructure Tests
  infrastructure:
    name: 🏗️ Infrastructure Tests
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Set up Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: ✅ Validate Docker Compose files
        run: |
          docker-compose config
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml config
          docker-compose -f docker-compose.yml -f docker-compose.enhanced-postgres.yml config

      - name: 🧪 Test infrastructure startup
        run: |
          # Start infrastructure services only (no GPU required)
          docker-compose up -d postgres qdrant minio redis
          
          # Wait for services to be ready
          sleep 30
          
          # Test service health
          curl -f http://localhost:6333/health || echo "⚠️ Qdrant health check failed"
          curl -f http://localhost:9000/minio/health/live || echo "⚠️ MinIO health check failed"
          docker-compose exec -T postgres pg_isready -U postgres || echo "⚠️ PostgreSQL health check failed"
          
          # Show service status
          docker-compose ps

      - name: 🧹 Cleanup
        if: always()
        run: |
          docker-compose down -v
          docker system prune -f

  # Documentation Tests
  documentation:
    name: 📚 Documentation Tests
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Check documentation links
        uses: gaurav-nelson/github-action-markdown-link-check@v1
        with:
          use-quiet-mode: 'yes'
          use-verbose-mode: 'yes'
          config-file: '.github/workflows/markdown-link-check.json'

      - name: 📝 Validate markdown format
        run: |
          # Check for common markdown issues
          find . -name "*.md" -not -path "./node_modules/*" -exec grep -l "]()" {} \; | while read file; do
            echo "❌ Empty link found in: $file"
          done
          
          # Check for proper heading structure
          find . -name "*.md" -not -path "./node_modules/*" -exec python3 -c "
          import sys
          import re
          
          with open('$file', 'r') as f:
              content = f.read()
              
          # Check for proper heading hierarchy
          headings = re.findall(r'^(#{1,6})\s+(.+)$', content, re.MULTILINE)
          prev_level = 0
          
          for heading_marks, text in headings:
              level = len(heading_marks)
              if level > prev_level + 1:
                  print(f'❌ Heading hierarchy issue in {sys.argv[1]}: {heading_marks} {text}')
              prev_level = level
          " {} \;

  # Security and Compliance
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: 📊 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: 🔐 Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  # Performance Tests
  performance:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 📦 Install performance testing tools
        run: |
          pip install locust pytest-benchmark

      - name: ⚡ Run performance tests
        run: |
          # Placeholder for performance tests
          echo "🚀 Performance tests would run here"
          echo "📊 Benchmarking API endpoints"
          echo "🔍 Memory usage analysis"
          echo "⏱️ Response time measurements"

  # Integration Tests
  integration:
    name: 🔗 Integration Tests
    runs-on: ubuntu-latest
    needs: [quality, docker, infrastructure]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/develop/')
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 📦 Install test dependencies
        run: |
          pip install pytest pytest-asyncio httpx aiohttp

      - name: 🧪 Run integration tests
        run: |
          # Placeholder for integration tests
          echo "🔗 Integration tests would run here"
          echo "🧪 API endpoint testing"
          echo "🔄 Service communication testing"
          echo "💾 Database integration testing"

