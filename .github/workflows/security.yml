name: 🔒 Security & Dependencies

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main, 'develop/*' ]
  pull_request:
    branches: [ main, 'develop/*' ]
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  security-events: write
  pull-requests: write
  issues: write

jobs:
  # Dependency Security Scan
  dependency-scan:
    name: 🔍 Dependency Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 📦 Install safety
        run: pip install safety

      - name: 🔍 Scan Python dependencies
        run: |
          echo "🔍 Scanning Python dependencies for security vulnerabilities..."
          
          # Scan each service's requirements
          for req_file in $(find . -name "requirements.txt"); do
            echo "Scanning $req_file"
            safety check -r "$req_file" --json --output "safety-$(basename $(dirname $req_file)).json" || true
          done

      - name: 📊 Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: dependency-security-scan
          path: safety-*.json

  # Container Security Scan
  container-scan:
    name: 🐳 Container Security Scan
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [multimodal-worker, retrieval-proxy, ai-agents]
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🏗️ Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./services/${{ matrix.service }}
          file: ./services/${{ matrix.service }}/Dockerfile
          tags: ${{ matrix.service }}:security-scan
          load: true

      - name: 🔍 Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ matrix.service }}:security-scan
          format: 'sarif'
          output: 'trivy-${{ matrix.service }}.sarif'

      - name: 📊 Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-${{ matrix.service }}.sarif'

  # Secret Scan
  secret-scan:
    name: 🔐 Secret Scan
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔍 TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  # License Compliance
  license-scan:
    name: 📄 License Compliance
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 📦 Install pip-licenses
        run: pip install pip-licenses

      - name: 🔍 Check Python package licenses
        run: |
          echo "🔍 Checking Python package licenses..."
          
          for req_file in $(find . -name "requirements.txt"); do
            echo "Checking licenses for $req_file"
            pip install -r "$req_file"
            pip-licenses --format=json --output-file="licenses-$(basename $(dirname $req_file)).json"
          done

      - name: 📊 Upload license scan results
        uses: actions/upload-artifact@v4
        with:
          name: license-scan-results
          path: licenses-*.json

  # SAST (Static Application Security Testing)
  sast-scan:
    name: 🔍 SAST Scan
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python

      - name: 🏗️ Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Infrastructure Security
  infrastructure-scan:
    name: 🏗️ Infrastructure Security
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔍 Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: dockerfile,github_actions
          output_format: sarif
          output_file_path: checkov-results.sarif

      - name: 📊 Upload Checkov scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-results.sarif

  # Security Report
  security-report:
    name: 📊 Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, container-scan, secret-scan, license-scan, sast-scan, infrastructure-scan]
    if: always()
    steps:
      - name: 📥 Download all artifacts
        uses: actions/download-artifact@v4

      - name: 📊 Generate security report
        run: |
          echo "# 🔒 Security Scan Report" > security-report.md
          echo "" >> security-report.md
          echo "**Scan Date**: $(date)" >> security-report.md
          echo "**Commit**: ${{ github.sha }}" >> security-report.md
          echo "" >> security-report.md
          
          echo "## 📋 Scan Results Summary" >> security-report.md
          echo "" >> security-report.md
          
          # Dependency scan results
          if [ -d "dependency-security-scan" ]; then
            echo "### 📦 Dependency Security Scan" >> security-report.md
            for file in dependency-security-scan/*.json; do
              if [ -f "$file" ]; then
                vulnerabilities=$(jq '.vulnerabilities | length' "$file" 2>/dev/null || echo "0")
                echo "- $(basename $file .json): $vulnerabilities vulnerabilities found" >> security-report.md
              fi
            done
            echo "" >> security-report.md
          fi
          
          # License scan results
          if [ -d "license-scan-results" ]; then
            echo "### 📄 License Compliance" >> security-report.md
            for file in license-scan-results/*.json; do
              if [ -f "$file" ]; then
                licenses=$(jq '. | length' "$file" 2>/dev/null || echo "0")
                echo "- $(basename $file .json): $licenses packages scanned" >> security-report.md
              fi
            done
            echo "" >> security-report.md
          fi
          
          echo "## 🔧 Recommendations" >> security-report.md
          echo "" >> security-report.md
          echo "1. **Update Dependencies**: Keep all dependencies up to date" >> security-report.md
          echo "2. **Review Licenses**: Ensure all licenses are compatible" >> security-report.md
          echo "3. **Fix Vulnerabilities**: Address any high/critical vulnerabilities" >> security-report.md
          echo "4. **Monitor Continuously**: Set up automated security monitoring" >> security-report.md
          echo "" >> security-report.md
          
          echo "## 📚 Resources" >> security-report.md
          echo "" >> security-report.md
          echo "- [Security Policy](SECURITY.md)" >> security-report.md
          echo "- [Vulnerability Reporting](SECURITY.md#reporting-vulnerabilities)" >> security-report.md
          echo "- [Security Best Practices](docs/security.md)" >> security-report.md

      - name: 📊 Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report.md

      - name: 💬 Comment PR with security report
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('security-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🔒 Security Scan Results\n\n${report}`
            });

  # Dependency Updates (Dependabot alternative)
  dependency-updates:
    name: 🔄 Check for Dependency Updates
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🐍 Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: 📦 Install pip-tools
        run: pip install pip-tools pip-audit

      - name: 🔄 Check for updates
        run: |
          echo "🔄 Checking for dependency updates..."
          
          for req_file in $(find . -name "requirements.txt"); do
            echo "Checking updates for $req_file"
            dir=$(dirname "$req_file")
            
            # Create pip-compile input if it doesn't exist
            if [ ! -f "$dir/requirements.in" ]; then
              cp "$req_file" "$dir/requirements.in"
            fi
            
            # Check for updates
            cd "$dir"
            pip-compile --upgrade requirements.in
            
            # Check if there are changes
            if ! git diff --quiet requirements.txt; then
              echo "📦 Updates available for $req_file"
              git add requirements.txt
            fi
            
            cd - > /dev/null
          done

      - name: 🔍 Security audit
        run: |
          echo "🔍 Running security audit on updated dependencies..."
          pip-audit --format=json --output=audit-results.json || true

      - name: 💾 Create update PR
        run: |
          if ! git diff --quiet --cached; then
            git config --local user.email "action@github.com"
            git config --local user.name "GitHub Action"
            
            # Create branch
            branch_name="chore/dependency-updates-$(date +%Y%m%d)"
            git checkout -b "$branch_name"
            
            # Commit changes
            git commit -m "🔄 chore: update dependencies

            - Automated dependency updates
            - Security audit completed
            - All tests should pass
            
            Generated by GitHub Actions"
            
            # Push branch
            git push origin "$branch_name"
            
            # Create PR (requires GitHub CLI or API call)
            echo "📝 Dependency update branch created: $branch_name"
            echo "🔧 Manual PR creation required"
          else
            echo "✅ No dependency updates available"
          fi
