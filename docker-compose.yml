version: '3.8'

services:
  # Vector Database
  qdrant:
    image: qdrant/qdrant:v1.7.4
    container_name: multimodal-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: unless-stopped
    networks:
      - multimodal-net

  # PostgreSQL for metadata and memory
  postgres:
    image: postgres:15-alpine
    container_name: multimodal-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-multimodal}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - multimodal-net

  # MinIO S3-compatible storage
  minio:
    image: minio/minio:RELEASE.2024-01-16T16-07-38Z
    container_name: multimodal-minio
    ports:
      - "9000:9000"
      - "9002:9001"
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-minioadmin}
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    networks:
      - multimodal-net

  # vLLM inference server
  vllm:
    image: vllm/vllm-openai:v0.2.7
    container_name: multimodal-vllm
    ports:
      - "8000:8000"
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - VLLM_MODEL=${VLLM_MODEL:-microsoft/DialoGPT-medium}
      - VLLM_HOST=0.0.0.0
      - VLLM_PORT=8000
    volumes:
      - vllm_cache:/root/.cache
      - ./models:/models
    command: >
      --model ${VLLM_MODEL:-microsoft/DialoGPT-medium}
      --host 0.0.0.0
      --port 8000
      --gpu-memory-utilization 0.8
      --max-model-len 1024
      --dtype auto
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/v1/models"]
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 180s
    restart: unless-stopped
    networks:
      - multimodal-net

  # LiteLLM proxy router
  litellm:
    image: ghcr.io/berriai/litellm:main-latest
    container_name: multimodal-litellm
    ports:
      - "4000:4000"
    environment:
      - LITELLM_MASTER_KEY=${LITELLM_MASTER_KEY:-sk-1234}
      - LITELLM_SALT_KEY=${LITELLM_SALT_KEY:-sk-salt-1234}
    volumes:
      - ./configs/litellm_simple.yaml:/app/config.yaml
    command: ["--config", "/app/config.yaml", "--port", "4000", "--num_workers", "1"]
    depends_on:
      vllm:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - multimodal-net

  # Multimodal worker service
  multimodal-worker:
    build:
      context: ./services/multimodal-worker
      dockerfile: Dockerfile
    container_name: multimodal-worker
    ports:
      - "8001:8001"
    environment:
      - CUDA_VISIBLE_DEVICES=0
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-multimodal}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD:-minioadmin}
    volumes:
      - multimodal_cache:/app/cache
      - /tmp:/tmp
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    depends_on:
      qdrant:
        condition: service_healthy
      postgres:
        condition: service_healthy
      minio:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - multimodal-net

  # Retrieval proxy service
  retrieval-proxy:
    build:
      context: ./services/retrieval-proxy
      dockerfile: Dockerfile
    container_name: retrieval-proxy
    ports:
      - "8002:8002"
    environment:
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-multimodal}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER:-minioadmin}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD:-minioadmin}
      - MULTIMODAL_WORKER_URL=http://multimodal-worker:8001
    depends_on:
      multimodal-worker:
        condition: service_healthy
      qdrant:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - multimodal-net

  # OpenWebUI for testing
  openwebui:
    image: ghcr.io/open-webui/open-webui:main
    container_name: multimodal-openwebui
    ports:
      - "3030:8080"
    environment:
      - OPENAI_API_BASE_URL=http://vllm:8000/v1
      - OPENAI_API_KEY=dummy-key
      - WEBUI_SECRET_KEY=${WEBUI_SECRET_KEY:-webui-secret}
    volumes:
      - openwebui_data:/app/backend/data
    depends_on:
      - vllm
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - multimodal-net

volumes:
  qdrant_data:
  postgres_data:
  minio_data:
  vllm_cache:
  multimodal_cache:
  openwebui_data:

networks:
  multimodal-net:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.25.0.0/24
          gateway: 172.25.0.1

