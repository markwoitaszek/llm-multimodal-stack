# Production overrides for the multimodal stack
version: '3.8'

services:
  # Production PostgreSQL with optimizations
  postgres:
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    command: >
      postgres
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=200
      -c shared_buffers=512MB
      -c effective_cache_size=2GB
      -c maintenance_work_mem=128MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
    volumes:
      - ${POSTGRES_DATA_PATH:-postgres_data}:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    deploy:
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Production Qdrant with performance tuning
  qdrant:
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
      - QDRANT__SERVICE__MAX_REQUEST_SIZE_MB=32
      - QDRANT__STORAGE__PERFORMANCE__MAX_SEARCH_THREADS=4
      - QDRANT__STORAGE__OPTIMIZERS__MEMMAP_THRESHOLD_KB=200000
    volumes:
      - ${QDRANT_DATA_PATH:-qdrant_data}:/qdrant/storage
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          memory: 2G

  # Production MinIO with performance settings
  minio:
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_BROWSER_REDIRECT_URL=https://minio.yourdomain.com
    volumes:
      - ${MINIO_DATA_PATH:-minio_data}:/data
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Production vLLM with optimized settings
  vllm:
    environment:
      - CUDA_VISIBLE_DEVICES=${CUDA_VISIBLE_DEVICES:-0}
      - VLLM_MODEL=${VLLM_MODEL}
      - VLLM_HOST=0.0.0.0
      - VLLM_PORT=8000
      - VLLM_API_KEY=${VLLM_API_KEY}
    command: >
      --model ${VLLM_MODEL}
      --host 0.0.0.0
      --port 8000
      --gpu-memory-utilization 0.85
      --max-model-len 4096
      --dtype auto
      --api-key ${VLLM_API_KEY}
      --served-model-name gpt-3.5-turbo
      --chat-template ./chat_templates/chatml.jinja
    volumes:
      - ${CACHE_PATH:-vllm_cache}:/root/.cache
      - ./models:/models:ro
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # Production LiteLLM with enhanced config
  litellm:
    environment:
      - LITELLM_MASTER_KEY=${LITELLM_MASTER_KEY}
      - LITELLM_SALT_KEY=${LITELLM_SALT_KEY}
      - LITELLM_LOG_LEVEL=INFO
      - LITELLM_DROP_PARAMS=true
      - LITELLM_SET_VERBOSE=false
    volumes:
      - ./configs/litellm_config.yaml:/app/config.yaml:ro
    command: ["--config", "/app/config.yaml", "--port", "4000", "--num_workers", "4"]
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Production Multimodal Worker
  multimodal-worker:
    environment:
      - CUDA_VISIBLE_DEVICES=${CUDA_VISIBLE_DEVICES:-0}
      - LOG_LEVEL=INFO
      - WORKERS=2
      - MAX_CONCURRENT_REQUESTS=10
    volumes:
      - ${CACHE_PATH:-multimodal_cache}:/app/cache
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 8G
        reservations:
          memory: 4G
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # Production Retrieval Proxy
  retrieval-proxy:
    environment:
      - LOG_LEVEL=INFO
      - WORKERS=4
      - MAX_CONCURRENT_REQUESTS=20
    deploy:
      replicas: 2
      resources:
        limits:
          memory: 2G
        reservations:
          memory: 1G

  # Production OpenWebUI
  openwebui:
    environment:
      - OPENAI_API_BASE_URL=http://litellm:4000/v1
      - OPENAI_API_KEY=${LITELLM_MASTER_KEY}
      - WEBUI_SECRET_KEY=${WEBUI_SECRET_KEY}
      - WEBUI_AUTH=true
      - WEBUI_NAME="Multimodal LLM Stack"
    volumes:
      - openwebui_data:/app/backend/data
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: multimodal-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./configs/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./certs:/etc/nginx/certs:ro
    depends_on:
      - litellm
      - multimodal-worker
      - retrieval-proxy
      - openwebui
    restart: unless-stopped
    networks:
      - multimodal-net
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: multimodal-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    networks:
      - multimodal-net
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: multimodal-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - multimodal-net
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: multimodal-grafana
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./configs/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - multimodal-net
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

volumes:
  redis_data:
  prometheus_data:
  grafana_data:
